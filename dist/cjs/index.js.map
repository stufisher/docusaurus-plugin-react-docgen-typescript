{
  "version": 3,
  "sources": ["../../src/index.ts"],
  "sourcesContent": ["import path from \"path\";\nimport { promisify } from \"util\";\nimport Glob from \"glob\";\n\nimport type {\n  ParserOptions,\n  ComponentDoc,\n  FileParser,\n} from \"react-docgen-typescript\";\nimport {\n  withCustomConfig,\n  withCompilerOptions,\n  withDefaultConfig,\n} from \"react-docgen-typescript\";\n\nimport type { Plugin, DocusaurusContext, RouteConfig } from \"@docusaurus/types\";\nimport type { CompilerOptions } from \"typescript\";\n\nconst glob = promisify(Glob);\n\ntype Route = Pick<RouteConfig, \"exact\" | \"component\" | \"path\" | \"priority\">;\n\ntype Union =\n  | {\n      global?: undefined | false;\n      route: Route;\n    }\n  | {\n      global: boolean;\n      route?: Route;\n    };\n\nexport type Options = Union & {\n  src: string | string[];\n  tsConfig?: string;\n  compilerOptions?: CompilerOptions;\n  parserOptions?: ParserOptions;\n  globOptions: null;\n};\n\nconst getParser = (\n  config?: Options[\"tsConfig\"],\n  options?: Options[\"compilerOptions\"],\n  parserOptions?: Options[\"parserOptions\"]\n): FileParser[\"parse\"] => {\n  if (config) {\n    return withCustomConfig(config, parserOptions).parse;\n  } else if (options) {\n    return withCompilerOptions(options, parserOptions).parse;\n  }\n\n  return withDefaultConfig(parserOptions).parse;\n};\n\nexport default function plugin(\n  context: DocusaurusContext,\n  {\n    src,\n    global = false,\n    route,\n    tsConfig,\n    compilerOptions,\n    parserOptions,\n  }: Options\n): Plugin<ComponentDoc[]> {\n  return {\n    name: \"docusaurus-plugin-react-docgen-typescript\",\n    async loadContent() {\n      return getParser(\n        tsConfig,\n        compilerOptions,\n        parserOptions\n      )(\n        await glob(Array.isArray(src) ? src.join(\",\") : src, {\n          absolute: true,\n        })\n      );\n    },\n    configureWebpack(config) {\n      return {\n        resolve: {\n          alias: {\n            \"@docgen\": path.join(\n              config.resolve.alias[\"@generated\"],\n              \"docusaurus-plugin-react-docgen-typescript\",\n              \"default\"\n            ),\n          },\n        },\n      };\n    },\n    async contentLoaded({ content, actions }): Promise<void> {\n      const { createData, setGlobalData, addRoute } = actions;\n\n      if (global) {\n        console.warn(\n          \"Using global data can potentially slow down your entire app. Use with care \u2764\uFE0F\"\n        );\n\n        setGlobalData(content);\n      } else if (route) {\n        addRoute({\n          ...route,\n          modules: {\n            docgen: await createData(\"docgen.json\", JSON.stringify(content)),\n          },\n        });\n      } else {\n        const processed = {};\n        content.map((component) => {\n          const componentName = component.displayName;\n          let fileName = componentName;\n          if (componentName in processed) {\n            console.warn(\n              `Duplicate component '${componentName}' found (existing:\n                ${\n                  processed[componentName][processed[componentName].length - 1]\n                })`\n            );\n\n            fileName += `${processed[componentName].length}`;\n            console.warn(\n              `'${component.filePath}' will be written to '${fileName}.json'`\n            );\n          }\n          createData(`${fileName}.json`, JSON.stringify(component.props));\n          if (!(componentName in processed)) {\n            processed[componentName] = [];\n          }\n          processed[componentName].push(component.filePath);\n        });\n      }\n    },\n  };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAiB;AACjB,kBAA0B;AAC1B,kBAAiB;AAOjB,qCAIO;AAKP,MAAM,WAAO,uBAAU,YAAAA,OAAI;AAsB3B,MAAM,YAAY,CAChB,QACA,SACA,kBACwB;AACxB,MAAI,QAAQ;AACV,eAAO,iDAAiB,QAAQ,aAAa,EAAE;AAAA,EACjD,WAAW,SAAS;AAClB,eAAO,oDAAoB,SAAS,aAAa,EAAE;AAAA,EACrD;AAEA,aAAO,kDAAkB,aAAa,EAAE;AAC1C;AAEe,SAAR,OACL,SACA;AAAA,EACE;AAAA,EACA,SAAS;AAAA,EACT;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GACwB;AACxB,SAAO;AAAA,IACL,MAAM;AAAA,IACN,MAAM,cAAc;AAClB,aAAO;AAAA,QACL;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,QACE,MAAM,KAAK,MAAM,QAAQ,GAAG,IAAI,IAAI,KAAK,GAAG,IAAI,KAAK;AAAA,UACnD,UAAU;AAAA,QACZ,CAAC;AAAA,MACH;AAAA,IACF;AAAA,IACA,iBAAiB,QAAQ;AACvB,aAAO;AAAA,QACL,SAAS;AAAA,UACP,OAAO;AAAA,YACL,WAAW,YAAAC,QAAK;AAAA,cACd,OAAO,QAAQ,MAAM,YAAY;AAAA,cACjC;AAAA,cACA;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,IACA,MAAM,cAAc,EAAE,SAAS,QAAQ,GAAkB;AACvD,YAAM,EAAE,YAAY,eAAe,SAAS,IAAI;AAEhD,UAAI,QAAQ;AACV,gBAAQ;AAAA,UACN;AAAA,QACF;AAEA,sBAAc,OAAO;AAAA,MACvB,WAAW,OAAO;AAChB,iBAAS,iCACJ,QADI;AAAA,UAEP,SAAS;AAAA,YACP,QAAQ,MAAM,WAAW,eAAe,KAAK,UAAU,OAAO,CAAC;AAAA,UACjE;AAAA,QACF,EAAC;AAAA,MACH,OAAO;AACL,cAAM,YAAY,CAAC;AACnB,gBAAQ,IAAI,CAAC,cAAc;AACzB,gBAAM,gBAAgB,UAAU;AAChC,cAAI,WAAW;AACf,cAAI,iBAAiB,WAAW;AAC9B,oBAAQ;AAAA,cACN,wBAAwB;AAAA,kBAEpB,UAAU,aAAa,EAAE,UAAU,aAAa,EAAE,SAAS,CAAC;AAAA,YAElE;AAEA,wBAAY,GAAG,UAAU,aAAa,EAAE;AACxC,oBAAQ;AAAA,cACN,IAAI,UAAU,iCAAiC;AAAA,YACjD;AAAA,UACF;AACA,qBAAW,GAAG,iBAAiB,KAAK,UAAU,UAAU,KAAK,CAAC;AAC9D,cAAI,EAAE,iBAAiB,YAAY;AACjC,sBAAU,aAAa,IAAI,CAAC;AAAA,UAC9B;AACA,oBAAU,aAAa,EAAE,KAAK,UAAU,QAAQ;AAAA,QAClD,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF;AACF;",
  "names": ["Glob", "path"]
}
